{
  "hash": "5ffd2fb7bb7ef8ac7b15778856d3e35a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Researching as if to Blog\"\ndate: 2024-04-05\nauthor: Kazuharu Yanagimoto\ndraft: false\ncategories: [R, Quarto]\nimage: img/thumbnail.png\ntwitter-card:\n    image: img/thumbnail.png\ntoc: true\n---\n\n## Make Jupyter Notebook or R Markdown a Blog\n\nJupyter Notebook and R Markdown are very useful tools for communication\nwith co-authors and supervisors during the trial and error stage of research.\nHowever, as these files accumulate, it becomes difficult to remember the contents\nand you have to open them one by one.\n\nTherefore, I thought about managing these analysis results like a blog.\nIf you arrange daily reports in chronological order,\nit is natural to manage them in blog format.\nBy using the functions of an existing blog,\nyou can make it easier to find the content from the title or thumbnail,\nand manage it more efficiently with features such as tagging and search.\n\nIn this article, I will introduce how to manage research like a blog using Quarto.\nI myself show this type of blog during meetings with supervisors or co-authors\nto discuss the progress of the week.\nAlso, I have provided a sample blog below, so you can get an idea.\nYou can also check the source code on [GitHub Repository](https://github.com/kazuyanagimoto/quarto-research-blog).\n\n\n```{=html}\n<div class=\"bcard-wrapper\"><span class=\"bcard-header withgfav\"><div class=\"bcard-favicon\" style=\"background-image: url(https://www.google.com/s2/favicons?domain=https://kazuyanagimoto.com/quarto-research-blog/)\"></div><div class=\"bcard-site\"><a href=\"https://kazuyanagimoto.com/quarto-research-blog/\" rel=\"nofollow\" target=\"_blank\"></a></div><div class=\"bcard-url\"><a href=\"https://kazuyanagimoto.com/quarto-research-blog/\" rel=\"nofollow\" target=\"_blank\">https://kazuyanagimoto.com/quarto-research-blog/</a></div></span><span class=\"bcard-main\"><div class=\"bcard-title\"><a href=\"https://kazuyanagimoto.com/quarto-research-blog/\" rel=\"nofollow\" target=\"_blank\">Quarto Research Blog - Research as a Blog</a></div><div class=\"bcard-description\"></div></span></div>\n```\n\n```{css}\n.bcard-wrapper{\n    display: block;\n    width: 100%;\n    max-width: 500px;\n    margin: 10px 0px;\n    border-radius: 3px;\n    padding: 12px;\n    border: 1px solid #e0e0e0;\n}\n.bcard-site,.bcard-url{\n    font-size: 12px;\n    line-height: 1.3;\n    overflow: hidden;\n    max-height: 15px;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n}\n.bcard-header {\n    position: relative;\n    height: 30px;\n    margin-bottom: 5px;\n    display: block;\n}\n.withgfav{padding-left: 23px;}\n.bcard-favicon {position: absolute;\n    top: 0px; left:0px; width:16px; height:16px;}\n.bcard-main{\n    overflow: hidden;\n    position: relative;\n    display: block;\n}\n.withogimg{\n    padding-right: 110px;\n    height: 100px;\n}\n .bcard-img {\nwidth: 100px;\nheight: 100px; \nposition: absolute;\n    top: 0;\n    right: 0;\n    background-size:cover;\n    background-position:center center;\n}\n .bcard-title{\n    font-size: 17px;\n    margin: 0 0 2px;\n    line-height: 1.4;\n    max-height: 47px;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n    font-weight: bold;\n}\n .bcard-description {\n    line-height: 1.5;\n    font-size: 12px;\n    max-height: 72px;\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 3;\n}\n.bcard-title a{color:#424242;}\n.bcard-url a{color:#9e9e9e;}\n.bcard-title a:hover,.bcard-url a:hover,.bcard-site a:hover{text-decoration:underline;}\n```\n\n\n### Three Ways to Share\n\nThe extent to which research progress should be made public varies by project and field.\nConsidering the balance between accessibility and security, there are three main ways to share:\n\n1. Share a blog (HTML files) compiled locally through GitHub\n    - **Pros**: High security. Free\n    - **Cons**: The recipient needs to `git pull` and open the HTML file locally\n1. Host on GitHub Pages\n    - **Pros**: The recipient can view it in a browser. Free\n    - **Cons**: Basically, it is open to the whole world. GitHub Enterprise can be used to make it private, but it is a bit expensive\n1. Add Basic authentication to AWS S3 + CloudFront\n    - **Pros**: The recipient can view it in a browser\n    - **Cons**: AWS configuration is required. Costs tens of cents of dollars per month\n\nIn this article, I will introduce the most versatile third method.\nIn fact, in my research project, I use the third method to share a private site that is somewhat private while minimizing the burden on the recipient (supervisors and co-authors).\nThe aforementioned demo site is deployed using the second method.\nYou can view the private site deployed with the third method from [here](https://quarto-research-blog.kazuyanagimoto.com) (username: `abcd`, password: `1234`).\n\n## Writing a Blog with Quarto\n\n[Quarto](https://quarto.org) is a tool that extends R Markdown,\nand since it runs in the background with `knitr`,\nyou can use R Markdown features as they are.\nAlso, by using `jupyter` as the background engine,\nyou can handle other languages such as Python and Julia.^[\n    Strictly speaking, `knitr` can handle multiple languages from the beginning,\n    so if you use `knitr` as the background engine,\n    you can share multiple languages in the same notebook.\n    You can see an example of this in my past [blog](https://kazuyanagimoto.com/blog/2023/04/30/quarto_multi_lang/).\n]\n\nIn this article, I will explain the unique features of Quarto and how to set it up as a website.\nTo learn more about Quarto Markdown syntax and basic features,\nplease refer to the [official documentation](https://quarto.org/docs/).\n\n### Differences from R Markdown\n\nQuarto can be written just like R Markdown,\nbut the only difference is in the chunk options.\n\n````{.markdown filename=\"R markdown\"}\n```{{r, include = FALSE}}\nmdl <- lm(mpg ~ wt, data = mtcars)\n```\n````\n\n````{.markdown filename=\"Quarto\"}\n```{{r}}\n#| include: false\nmdl <- lm(mpg ~ wt, data = mtcars)\n```\n````\n\nI think this is a good notation because it is just a comment from the perspective of code execution,\nand it allows them to coexist with other languages such as Python and Julia.\n\nOther notable features include [Tabset Panel](https://quarto.org/docs/interactive/layout.html#tabset-panel) and [Callout Blocks](https://quarto.org/docs/authoring/callouts.html),\nwhich make it easier to read.\nAlso, the notation for [citations](https://quarto.org/docs/authoring/footnotes-and-citations.html) has become easier to understand.\n\n### Setting up the Website\n\n#### `_quarto.yml`\n\nThis is a project-level configuration file.\nFor details, please refer to the [official documentation](https://quarto.org/docs/reference/projects/options.html).\nMy configuration file looks like this.\n\n```{.yaml}\nproject:\n  type: website\n  output-dir: docs\n  preview: \n    port: 5556\n    browser: true\n    watch-inputs: true\n    navigate: true\n\nwebsite:\n  title: \"Quarto Research Blog\"\n  favicon: favicon.svg\n  navbar:\n    right:\n      - icon: github\n        href: https://github.com/kazuyanagimoto/quarto-research-blog\nformat:\n  html:\n    theme:\n      - cosmo\n      - custom.scss\n```\n\n- `output-dir: docs`: When hosting with GitHub Pages, you need to output HTML files to the `docs` directory. If you deploy with GitHub Actions, it doesn't have to be `docs`\n- `favicon`: The favicon file. I often use the one from [Icooon Mono](https://icooon-mono.com)\n- `theme`: You can choose a theme from [Bootswatch](https://bootswatch.com)\n- `custom.scss`: You can set the CSS. Quarto has pre-defined [Sass Variables](https://quarto.org/docs/output-formats/html-themes.html#sass-variables), so you can easily customize it\n\n::: {.callout-tip collapse=\"true\"}\n\n## Project's Code Name\n\nResearch often goes in a different direction from the research question set at the beginning. Therefore, the name of the repository and the actual research may differ.\nFollowing Dr. Andrew Heiss's [idea](https://github.com/andrewheiss/testy-turtle),\nI give the project a code name that has nothing to do with the research.\n\nFor example, the project I researched gender gaps in Japan has the code name [common cheetah](https://kazuyanagimoto.com/research/common-cheetah/).\nThis is generated using the `codename` R package.\n\n```r\nlibrary(codename)\ncodename_message()\n#> code name generated by {codename} v.0.5.0. R version 4.2.2 (2022-10-31).\n\ncodename(seed = 210715, type = \"ubuntu\") # The day I started the project\n#> [1] \"common cheetah\"\n```\n\nBy the way, with this [Ubuntu-styling](https://wiki.ubuntu.com/DevelopmentCodeNames),\nan animal name is always assigned, so it's easy to decide on a favicon.\nI don't know if the co-authors will find it interesting...\n\n:::\n\n#### `_metadata.yml`\n\nThis is a directory-level configuration file.\nFor details, please refer to the [official documentation](https://quarto.org/docs/reference/formats/html.html).\n\n```{.yaml}\nfreeze: auto\ntitle-block-banner: true\nlast-updated: last-modified\n\nexecute:\n  echo: false\n  warning: false\n  message: false\n\nformat:\n  html:\n    code-tools: true\n```\n\n- `freeze: auto`: Saves the results of code cells. If there is a change in the code, it will automatically update. This speeds up the compilation of the blog and allows you to generate HTML without running the code, such as with GitHub Actions\n- `echo`, `warning`, `message` are hidden as they are not needed when reading the results as a blog\n- `code-tools: true`: This allows you to check the code from the top right of the page. This is useful for co-authors to quickly check the analysis content\n\n\n#### Thumbnails\n\nIf you want to use an image file on your computer as a thumbnail,\nyou can specify it with the `image` tag in the YAML header.\n\n```{.yaml}\n---\ntitle: A Blog Post\nimage: path/to/image.jpg\n---\n```\n\nIf you want to use a graph in the analysis as a thumbnail,\nyou can set the chunk option `classes: preview-image`.\n\n```` markdown\n\n```{.r}\n#| classes: preview-image\nplot(cars)\n```\n\n````\n\n#### `.gitignore`\n\nWith the above settings, you can compile HTML files locally.\nAlso, if you push it to GitHub as it is,\nyou can publish it with GitHub Pages by setting `docs/` as the root directory.\nHowever, managing automatically generated HTML files and libraries in Git is not an elegant way.\nIt's a hassle to resolve conflicts when they occur, and the repository size will increase.\nTherefore, ignore the `docs/` directory in `.gitignore` and automatically generate HTML files with GitHub Actions as described below.\n\n```{.shell filename=\".gitignore\"}\n/.quarto/\n/_site/\n/docs/\n```\n\n::: {.callout-tip collapse=\"true\"}\n\n## Publishing with GitHub Pages\n\nIf it is fine to publish with GitHub Pages,\nyou can run the following command to generate HTML files in the `gh-pages` branch\nand publish them as GitHub Pages.\n\n```{.shell}\nquarto publish gh-pages --no-browser\n```\n\nYou can run this command whenever you write an article,\nbut you can automate it with the following GitHub Actions.\n\n```{.yaml filename=\".github/workflows/publish.yml\"}\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render and Publish\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n```\n\n:::\n\n\n## Adding Basic Authentication to AWS S3 + CloudFront\n\nBy using AWS S3 and CloudFront,\nyou can publish a website with password authentication (Basic authentication)\nat a relatively low cost (about tens of cents per month).\nPlease note that AWS specifications and pricing may change,\nso please follow the steps below at your own risk.\n\n### Create an S3 Bucket and Automatically Deploy with GitHub Actions\n\n#### Step 1: Create an S3 Bucket\n\nCreate a bucket from S3 in the AWS console.\nIt is easy to understand if the bucket name is the same as the GitHub repository.\nThe settings can be left as default.\nSince access is via CloudFront, block all public access to the bucket.\n\n#### Step 2: Create an IAM User and Get the Access Key\n\nCreate a user from IAM in the AWS console and\ngive it full access to S3 (AmazonS3FullAccess) as the policy.\nThen, get the access key and save it in a safe place.\n\n#### Step 3: Register the Access Key in GitHub Secrets\n\nOpen the repository's Settings from GitHub and\nregister `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` as new repository secrets.\n\n![](img/github_secrets.png)\n\n#### Step 4: Deploy with GitHub Actions\n\nBy setting up GitHub Actions as follows,\nHTML files are automatically deployed to the S3 bucket when pushed to the `main` branch.\n\n```{.yaml filename=\".github/workflows/publish.yml\"}\non:\n  workflow_dispatch:\n  push:\n    branches: main\n\nname: Quarto Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v4\n\n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n\n      - name: Render Quarto Project\n        uses: quarto-dev/quarto-actions/render@v2\n      \n      - name: Configure AWS Credentials\n        uses: aws-actions/configure-aws-credentials@v1\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-west-2\n\n      - name: S3 sync\n        working-directory: docs\n        run: aws s3 sync . s3://quarto-research-blog --delete\n```\n\n### Set Basic Authentication with CloudFront\n\nYou can set a password with Basic authentication by accessing the S3 bucket via CloudFront.\n\n#### Step 1: Create a CloudFront Function\n\nFrom the AWS console, create a function from CloudFront → Functions → Create function.\n\n```{.javascript}\nfunction handler(event) {\n  var request = event.request;\n  var headers = request.headers;\n  var uri = request.uri;\n\n  // echo -n user:pass | base64\n  var authString = \"Basic XXXXXXXXXXXXXXXXXXX\";\n\n  if (\n    typeof headers.authorization === \"undefined\" ||\n    headers.authorization.value !== authString\n  ) {\n    return {\n      statusCode: 401,\n      statusDescription: \"Unauthorized\",\n      headers: { \"www-authenticate\": { value: \"Basic\" } }\n    };\n  }\n  \n  // Check whether the URI is missing a file name.\n    if (uri.endsWith('/')) {\n        request.uri += 'index.html';\n    }\n    // Check whether the URI is missing a file extension.\n    else if (!uri.includes('.')) {\n        request.uri += '/index.html';\n    }\n  \n  return request;\n}\n```\n\nIn the `authString`, set the base64-encoded username and password.\nFor example, if you have a username `abcd` and password `1234` like the demo site,\nyou can encode it with `echo -n abcd:1234 | base64`.\nYou can encode it in CloudShell at the bottom left of the AWS console.\n\nIn the latter half of the code, `index.html` is added if the URL ends with `/` or if there is no extension.\nThe `index.html` in the subdirectory is not displayed when accessing the S3 bucket via CloudFront.\n\n::: {.callout-caution}\n\nDon't forget to publish the function you created.\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n\n## IP Address Restrictions\n\nIf you want to increase security, you can restrict access by IP address.\nIn the case of universities and companies, you often have a fixed IP address,\nso it should be relatively easy to set up.\nEnter the allowed IP addresses in `IP_WHITE_LIST`.\n\n```{.javascript}\nfunction handler(event) {\n  var request = event.request;\n  var clientIP = event.viewer.ip;\n  var headers = request.headers;\n  var uri = request.uri;\n  \n  //-------------------\n  // Check IP\n  //-------------------\n  var IP_WHITE_LIST = [\n   'xxx.xxx.xxx.xxx',\n  ];\n    \n  var isPermittedIp = IP_WHITE_LIST.includes(clientIP);\n  \n  if (!isPermittedIp) {\n    var response = {\n        statusCode: 403,\n        statusDescription: 'Forbidden',\n    }\n    return response;\n  }\n  \n  //---------------------------\n  // Basic Authentication\n  //---------------------------\n  \n  // echo -n user:pass | base64\n  var authString = \"Basic XXXXXXXXXXXXXXXXXXX\";\n\n  if (\n    typeof headers.authorization === \"undefined\" ||\n    headers.authorization.value !== authString\n  ) {\n    return {\n      statusCode: 401,\n      statusDescription: \"Unauthorized\",\n      headers: { \"www-authenticate\": { value: \"Basic\" } }\n    };\n  }\n  \n  //--------------------------------------\n  // Correct Subdirectory index.html\n  //-------------------------------------\n  \n  // Check whether the URI is missing a file name.\n    if (uri.endsWith('/')) {\n        request.uri += 'index.html';\n    }\n    // Check whether the URI is missing a file extension.\n    else if (!uri.includes('.')) {\n        request.uri += '/index.html';\n    }\n  \n  return request;\n}\n```\n:::\n\n#### Step 2: Create a CloudFront Distribution\n\nCreate a distribution from CloudFront in the AWS console.\n\n- Origin Domain Name: Select the S3 bucket you created earlier\n- Origin Access\n    - Select Origin access control settings\n    - Create a new OAC\n- Viewer: Select Redirect HTTP to HTTPS\n- Associate Function: Select CloudFront Functions and select the function you created earlier\n- Web Application Firewall (WAF): If enabled, it will incur a fee. I think it is unnecessary this time\n- Supported HTTP Versions: I selected HTTP/2 and HTTP/3\n- Default Root Object: Select `index.html`\n\n#### Step 3: Change the S3 Bucket Policy\n\nAfter completing the above, you will be asked to update the S3 bucket policy.\n\n1. Press the Copy Policy button and copy the Policy Statement\n1. Select the S3 bucket, edit the bucket policy from the Permissions tab, and paste the policy statement you copied earlier\n\n#### Step 4: Test\n\nCopy the distribution domain name from the CloudFront distribution and access it in your browser.\nYou will be asked for a password, and by entering the username and password you set earlier, the blog should be displayed.\n\n### Optional: Setting up a Subdomain\n\nIf you have your own domain, you can create a subdomain for free to have your own URL.\nI have a domain [kazuyanagimoto.com](https://kazuyanagimoto.com) that I acquired from Google Domains,\nso I can create up to 100 subdomains for free.\n\n#### Step 1: Create a Subdomain\n\nCreate a subdomain from the DNS settings of your domain.\nIn the case of this demo site, create a CNAME record for the subdomain\n`quarto-research-blog.kazuyanagimoto.com` and\nset the CloudFront distribution domain name (without `https://`).\n\n#### Step 2: Create a Custom SSL Certificate\n\nCreate a custom SSL certificate from AWS Certificate Manager.\nSelect the public certificate request.\nAdd your domain and subdomain to the domain name.\nIt is recommended to use a wildcard for the subdomain like `*.kazuyanagimoto.com`.\n\n::: {.callout-caution}\n\nYou must use the us-east-1 region for AWS Certificate Manager to use it with CloudFront.\n\n:::\n\nIf you select DNS validation, you will need to add a DNS record to your domain's DNS settings.\nA CNAME record starting with `_` will be displayed, so add it to your domain's DNS settings.\nAfter registration is complete, the status of the certificate should change to published.\n\n#### Step 3: Set the CloudFront Distribution Alternate Domain Name\n\nReturn to CloudFront and set the alternate domain name for the distribution.\nAs the alternate domain name, enter the subdomain you created earlier,\nand select the custom SSL certificate you created earlier.\n\n#### Step 4: Test\n\nAccess the subdomain.\nYou will be asked for a password, and by entering the username and password you set earlier,\nthe blog should be displayed.\n\n![](img/basic_auth.png){width=70% fig-align=\"center\"}\n\n\n```{=html}\n<iframe \n  class=\"hatenablogcard\" \n  style=\"width:100%;height:155px;max-width:680px;\" \n  title=\"Quarto Research Blog\" \n  src=\"https://hatenablog-parts.com/embed?url=https://quarto-research-blog.kazuyanagimoto.com\" \n  frameborder=\"0\" scrolling=\"no\">\n</iframe>\n```\n\n\n## Conclusion\n\nIn this article, I introduced how to manage research like a blog using Quarto.\nBy using this method, you can not only look back on your past analysis\nbut also communicate smoothly with co-authors and supervisors.\nI hope that this will help you make progress in your research.\n\nHave a happy Quarto life 🥂!\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}