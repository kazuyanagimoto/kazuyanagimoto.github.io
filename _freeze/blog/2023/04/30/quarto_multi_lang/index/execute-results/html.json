{
  "hash": "ac62b3147fc0b606e12999c3f7b089fc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quarto Is Multi-lingual!\"\ndate: 2023-4-30\nauthor: Kazuharu Yanagimoto\ncategories: [Julia, Python, R, Quarto, Stata]\nimage: img/matthias-heyde-8HLMLrkyLvE-unsplash.jpg\ntwitter-card:\n  image: img/matthias-heyde-8HLMLrkyLvE-unsplash.jpg\nknitr: true\nexecute: \n  warning: false\n  message: false\n---\n\n\n\nA common misunderstanding about Quarto is that we cannot use multiple languages\nwithin a document.\nIndeed, _Jupyter_ cannot use multiple languages within a document,\nand we usually use the jupyter engine for Python and Julia (and it is officially supported.)\n\nHowever, _knitr_ has already been able to execute multiple languages tons of years ago,\nso why can't we do it in Quarto?\n\nLet's see the following example with `palmerpenguins::penguins` of @horst2020\n\n### R\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nggplot(data = penguins, aes(x = flipper_length_mm)) +\n  geom_histogram(aes(fill = species), \n                 alpha = 0.5, \n                 position = \"identity\") +\n  scale_fill_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Flipper length (mm)\",\n       y = \"Frequency\",\n       title = \"Penguin Flipper Lengths\",\n       fill = NULL) +\n  theme_minimal() +\n  theme(panel.grid.major.x = element_blank(),\n        panel.grid.minor = element_blank(),\n        legend.position = c(0.9, 0.9))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n\n\n### Python\n\nTo run a python code on _knitr_, `install.packages(\"reticulate\")`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nfrom palmerpenguins import load_penguins\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\npenguins = load_penguins()\n\nplt.clf()\nsns.histplot(data=penguins, x='flipper_length_mm',\n                hue='species', palette=['#FF8C00', '#159090', '#A034F0'])\n\nplt.xlabel(\"Flipper length (mm)\") \nplt.ylabel(\"Frequncy\")\nplt.legend(title = \"\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n\n\n### Julia\n\nTo run a julia code on _knitr_, run `install.packages(\"JuliaCall\")`.\n`PalmerPenguins.load()` asks you to download the data,\nso you have to set `ENV[\"DATADEPS_ALWAYS_ACCEPT\"] = true` to automatically accept it.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.julia .cell-code}\nusing PalmerPenguins\nusing StatsPlots\nusing DataFrames\nENV[\"DATADEPS_ALWAYS_ACCEPT\"] = true;\n\npenguins = DataFrame(PalmerPenguins.load());\n\nhistogram(\n    [penguins[penguins.species .== species, :].flipper_length_mm for species in [\"Adelie\", \"Chinstrap\", \"Gentoo\"]],\n    label = [\"Adelie\" \"Chinstrap\" \"Gentoo\"],\n    fillcolor = [:darkorange :purple :cyan4],\n    fillalpha = 0.5,\n    xlabel = \"Flipper length (mm)\",\n    ylabel = \"Frequency\",\n    title = \"Penguin Flipper Lengths\",\n    legend = :topright,\n    grid = false,\n    legendfontsize = 7,\n    legendtitle = nothing,\n    bar_width = 5,\n    size = (480, 320),\n    dpi = 300,\n    tickfontsize = 6,\n    guidefontsize = 10,\n    titlefontsize = 12,\n    margin=Plots.Measures.Length(:mm, 2.0)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-J1.png){fig-align='center' width=720}\n:::\n:::\n\n\n\n\n### Stata\n\nDouglas Hemken's [Statamarkdown](https://github.com/hemken/Statamarkdown)\nallows us to use Stata on Rmarkdown (so as on Quarto!)\n\n\n::: {.cell filename='R'}\n\n```{.r .cell-code}\n# devtools::install_github(\"Hemken/Statamarkdown\")\nlibrary(Statamarkdown)\nhaven::write_dta(penguins, here::here(\"blog/2023/04/30/quarto_multi_lang/palmerpenguins.dta\"))\n```\n:::\n\n\n\nThanks to `Statamarkdown`, we can easily set the working directory to the directory where the `.qmd` file exists by just calling `cd` in Stata.\n\n\n\n::: {.cell filename='Stata'}\n\n```{.stata .cell-code}\ncd\n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\nC:\\Users\\kazuh\\GitHub\\kazuyanagimoto.github.io\\blog\\2023\\04\\30\\quarto_multi_lan\n> g\n```\n\n\n:::\n:::\n\n\n\nThen, you can run Stata code in a code chunk.\n\n\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nuse palmerpenguins.dta, clear\n\ntwoway (hist body_mass_g if species == 1, color(orange%40)) ///\n  (hist body_mass_g if species == 2, color(emerald%40)) ///\n  (hist body_mass_g if species == 3, color(purple%40)), ///\n   xtitle(\"Body Mass (g)\") ytitle(\"Frequency\") ///\n   legend(order(1 \"Adelie\" 2 \"Chinstrap\" 3 \"Gentoo\") pos(1) ring(0) col(1)) ///\n   plotregion(fcolor(white)) graphregion(fcolor(white))\ngraph export \"figure/stata/hist.svg\", replace\n\n```\n:::\n\n\n\n![](img/stata/hist.svg)\n\n\nBut you have to manually export an image file for a plot and add it into a document...\n\n## Tabset\n\nI think, one of the most useful case is when you want to support multiple source codes\nin a textbook or lecture notes.\nQuarto supports [Tabset layout](https://quarto.org/docs/interactive/layout.html#tabset-panel)\nand it's so smart!\n\n::: {.panel-tabset}\n\n## R\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = body_mass_g,\n             color = species, shape = species)) +\n  geom_point(size = 3) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(x = \"Flipper Length (mm)\", y = \"Body Mass (g)\", color = NULL, shape = NULL) +\n  theme_minimal() +\n  theme(legend.position = c(0.9, 0.1),\n        panel.grid.major = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n## Python\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nplt.clf()\n\nsns.scatterplot(data=penguins, x='flipper_length_mm', y='body_mass_g',\n                hue='species', style=\"species\",\n                palette=['#FF8C00', '#159090', '#A034F0'])\n\nplt.xlabel('Flipper Length (mm)')\nplt.ylabel('Body Mass (g)')\nplt.legend(title = \"\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=576}\n:::\n:::\n\n\n\n\n## Julia\n\n\n\n::: {.cell}\n\n```{.julia .cell-code}\n@df penguins scatter(\n  :flipper_length_mm,\n  :body_mass_g,\n  group = :species,\n  markersize = 5,\n  markershape = [:circle :utriangle :rect ],\n  markerstrokecolor = :white,\n  palette = [\"#FF8C00\", \"#159090\", \"#A034F0\"],\n  xaxis = \"Flipper Length (mm)\",\n  yaxis = \"Body Mass (g)\",\n  size = (480, 320),\n  dpi = 300,\n  legendfontsize = 8,\n  tickfontsize = 6,\n  guidefontsize = 10,\n  margin=Plots.Measures.Length(:mm, 2.0)\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-J1.png){width=720}\n:::\n:::\n\n\n\n## Stata\n\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nuse data/palmerpenguins, clear\n\nseparate body_mass_g, by(species)\ntwoway scatter body_mass_g? flipper_length_mm, ///\n   mcolor(orange emerald purple) mlab(\"\") ///\n   msymbol(O T S) ///\n   xtitle(\"Flipper Length (mm)\") ytitle(\"Body Mass (g)\") ///\n   legend(order(1 \"Adelie\" 2 \"Chinstrap\" 3 \"Gentoo\") pos(11) ring(0) col(1)) ///\n   plotregion(fcolor(white)) graphregion(fcolor(white))\nqui graph export \"figure/stata/scatter.svg\", replace\n```\n:::\n\n\n`\n![](img/stata/scatter.svg){fig-align=center}\n\n:::\n\nHave a happy Quarto life ðŸ¥‚!\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}