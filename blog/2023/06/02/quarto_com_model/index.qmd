---
title: "Quarto Communication for Economic Models"
date: 2023-06-02
author: Kazuharu Yanagimoto
categories: [Julia, Observable JS, Quarto]
image: https://source.unsplash.com/aNVx2FpKAF8
twitter-card:
  image: https://source.unsplash.com/aNVx2FpKAF8
execute: 
  warning: false
  message: false
jupyter: julia-1.9
---

For $t = 1, \dots, T$, households solve
$$
V(t, e, x) = \max_{c, x'} \frac{c^{1 - \sigma}}{1 - \sigma} + \beta \mathbb{E}V(t + 1, e', x')
$$
$$
\begin{aligned}
c + x' &\le (1 + r)x + ew \\
\text{Pr}(e' | e) &= \Gamma(e) \\
c, x' &\ge 0
\end{aligned}
$$


```{julia}
using Parameters
using QuantEcon
using Plots
using LaTeXStrings
```


```{julia}
@with_kw struct Model
	
	# Grid for x
	nₓ::Int = 100
	x̲::Float64 = 0.1
	x̄::Float64 = 4.0
	x_grid::Vector{Float64} = range(start = x̲, stop = x̄, length = nₓ)
	
	# Grid for e: parameters for Tauchen
	nₑ::Int = 10
	σ_ε::Float64 = 0.02058
	λ_ε::Float64 = 0.99
	m::Float64 = 1.5
	mc::MarkovChain = tauchen(nₑ, λ_ε, σ_ε, 0.0, m)
	e_grid::Vector{Float64} = exp.(mc.state_values)
	P::Matrix{Float64} = mc.p

	# Utility function
	σ::Float64 = 2.0
	β::Float64 = 0.97
	T::Int = 10

	# Prices
	r::Float64 = 0.07
	w::Float64 = 5.0
	
end

m = Model()
```

```{julia}
u(c, m::Model) = isone(m.σ) ? log(c) : c^(1 - m.σ) / (1 - m.σ)
```

```{julia}
function solve(m::Model)

	@unpack T, nₓ, nₑ, r, w, β, P, x_grid, e_grid = m

	V = zeros(nₓ, nₑ, T)

	for t = T:-1:1, iₓ= 1:nₓ, iₑ = 1:nₑ
		
		utility = -Inf
		for iₓ′ = 1:nₓ
			
			expected = (t == T) ? 0.0 : 
				sum(P[iₑ, iₑ′] * V[iₓ′, iₑ′, t+1] for iₑ′ = 1:nₑ)
			c = (1 + r) * x_grid[iₓ] + e_grid[iₑ] * w - x_grid[iₓ′]
			
			if c > 0
				utility = max(u(c, m) + β * expected, utility)
			end
	
		end
	
		V[iₓ, iₑ, t] = utility
	end

	return V
end
```


```{julia}
V = solve(m);
```
