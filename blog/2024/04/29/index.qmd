---
title: "A Gamechanger of Creating Tables in R: tinytable"
date: 2024-04-29
author: Kazuharu Yanagimoto
categories: [R, Quarto, LaTeX]
image: img/table_reg.svg
twitter-card:
    image: img/table_rev.svg
toc: true
---

## `kableExtra` or `gt`? No, `tinytable`!

In recent years, `kableExtra` and `gt` have been popular packages for creating tables in R.
I have used `kableExtra` for tables in a (LaTeX compiled) paper,
and `gt` for tables in a (HTML compiled) slides,
and I taught it in my [R workshop](https://github.com/kazuyanagimoto/workshop-r-2022).
However, I found a new package called [tinytable](https://vincentarelbundock.github.io/tinytable/) that is more flexible and easier to use than the other two packages. 
In this post, I will introduce how to use `tinytable` to create tables for LaTeX documents as an updated section of my workshop.

### What is `tinytable`?

The `tinytable` is a small (zero-dependencies, only uses baseR!) but powerful package that provides a simple and flexible way to create tables in R.
This package is developed by [Vincent Arel-Bundock](https://github.com/vincentarelbundock), the maintainer of the `modelsummary` package,
and is designed to work seamlessly with `modelsummary`.


## An Example of Creating Tables with `tinytable`

```{r}
library(dplyr)
library(tidyr)
library(tinytable)
```

I use [the Madrid traffic accident dataset](https://datos.madrid.es/portal/site/egob/menuitem.c05c1f754a33a9fbe4b2e4b294f1a5a0/?vgnextoid=7c2943010d9c3610VgnVCM2000001f4a900aRCRD&vgnextchannel=374512b9ace9f310VgnVCM100000171f5a0aRCRD&vgnextfmt=default),
which is from my workshop.
You can find the [downloading](https://github.com/kazuyanagimoto/kazuyanagimoto.github.io/blob/main/blog/2024/04/29/download_accident_bike.R) and [cleaning](https://github.com/kazuyanagimoto/kazuyanagimoto.github.io/blob/main/blog/2024/04/29/clean_accident_bike.R) codes in my blog repository.

```{r}
dir_post <- here::here("blog/2024/04/29/")
data <- arrow::read_parquet(file.path(dir_post, "data", "cleaned.parquet")) |>
  mutate(is_died = injury8 == "Died within 24 hours",
         is_hospitalized = injury8 %in% c("Hospitalization after 24 hours",
                                          "Hospitalization within 24 hours",
                                          "Died within 24 hours"))
```

I will create a table that shows the number of accidents.

```{r}
tab_count <- data |>
  filter(!is.na(weather), !is.na(gender)) |>
  summarize(n = n(), .by = c(year, gender, weather)) |>  
  pivot_wider(names_from = c(gender, year), values_from = n) |>
  arrange(weather) |>
  select(weather, starts_with("Men"), starts_with("Women"))

tab_count
```

You can create a table by using the `tt()` function.

```{r}
tt_count <- tab_count |>
  `colnames<-`(c("", rep(2019:2023, 2))) |>
  tt() |>
  group_tt(i = list("Good Weather" = 1, "Bad Weather" = 3),
           j = list("Men" = 2:6, "Women" = 7:11)) |>
  style_tt(i = c(1, 4), bold = TRUE) |>
  format_tt(replace = "-")

tt_count |>
  theme_tt("tabular") |>
  save_tt(file.path(dir_post, "tex", "table_count.tex"),
          overwrite = TRUE)
```

To format the table as an table in a paper,

- `group_tt()` groups the rows and columns as `multirow` and `multicolumn` in $\LaTeX$.
- `style_tt()` styles the rows as bold, italic, etc.
- `format_tt()` formats the cells as numeric, percentage, etc. `replace` argument replaces the `NA` cells with the specified character.
- You cannot change the column names in the `tt()` function, so you need to use `colnames<-()`, related to the issue [#194](https://github.com/vincentarelbundock/tinytable/issues/194)
- To save the table as a _plain_ table (without `\begin{table}` and `\end{table}`), use `theme_tt("tabular")`.

```{r}
#| include: false
tt_count |>
  save_tt(file.path(dir_post, "img", "table_count.pdf"),
          overwrite = TRUE)
```

```{bash}
#| include: false
#!/bin/bash
pdf2svg img/table_count.pdf img/table_count.svg
rm img/*.log # delete log files generated by save_tt()
```

![Number of Persons Involved in Traffic Accidents](img/table_count.svg){fig-align="center"}

### A trick to insert a LaTeX table in a Quarto document

In the previous section, I inserted a $\LaTeX$ table by SVG format.
Actually, I converted a `tinytable` object to a svg figure by the following two steps:

**1. Save the `tinytable` object as a PDF file.**

```{.r}
tt_count |>
  save_tt(file.path(dir_post, "img", "table_count.pdf"),
          overwrite = TRUE)
```

`tinytable::save_tt()` is a powerful funtion that can save the `tinytable` object as a PDF file.
If the file extension is `.pdf`,
the function compile it as a single PDF file by `tinytex` package.

**2. Convert the PDF file to a SVG file.**

````{yaml}
```{bash}
#!/bin/bash
pdf2svg img/table_count.pdf img/table_count.svg
```
````

`pdf2svg` is a command line tool that converts a PDF file to a SVG file.
And importantly, `knitr` can run the bash script in a code chunk.

## Modelsummary

```{r}
library(modelsummary)
library(fixest)
```

Since `tinytable` is designed to work seamlessly with `modelsummary`,
you can create a table of regression results by using `modelsummary` and `tinytable`.

```{r}
setFixest_fml(..ctrl = ~ type_person + positive_alcohol + positive_drug |
                          age_c + gender)
models <- list(
    "(1)" = feglm(xpd(is_hospitalized ~ ..ctrl),
                  family = binomial(logit), data = data),
    "(2)" = feglm(xpd(is_hospitalized ~ ..ctrl + type_vehicle),
                  family = binomial(logit), data = data),
    "(3)" = feglm(xpd(is_hospitalized ~ ..ctrl + type_vehicle + weather),
                  family = binomial(logit), data = data),
    "(4)" = feglm(xpd(is_died ~ ..ctrl),
                  family = binomial(logit), data = data),
    "(5)" = feglm(xpd(is_died ~ ..ctrl + type_vehicle),
                  family = binomial(logit), data = data),
    "(6)" = feglm(xpd(is_died ~ ..ctrl + type_vehicle + weather),
                  family = binomial(logit), data = data)
)

modelsummary(models)
```

To polish the table for a paper,

```{r}
cm  <-  c(
    "type_personPassenger" = "Passenger",
    "type_personPedestrian" = "Pedestrian",
    "positive_alcoholTRUE" = "Positive Alcohol"
)

gm <- tibble(
    raw = c("nobs", "FE: age_c", "FE: gender",
            "FE: type_vehicle", "FE: weather"),
    clean = c("Observations", "FE: Age Group", "FE: Gender",
              "FE: Type of Vehicle", "FE: Weather"),
    fmt = c(0, 0, 0, 0, 0)
)

tt_reg <- modelsummary(models,
  stars = c("+" = .1, "*" = .05, "**" = .01),
  coef_map = cm,
  gof_map = gm) |>
  group_tt(j = list("Hospitalization" = 2:4,
                    "Died within 24 hours" = 5:7))

tt_reg |>
  theme_tt("tabular") |>
  save_tt(file.path(dir_post, "tex", "table_reg.tex"),
          overwrite = TRUE)
```

- `coef_map` renames the coefficients
- `gof_map` renames the goodness-of-fit statistics
- Since the `modelsummary` function returns a `tinytable` object, you can use the `tinytable` functions to polish the table


```{r}
#| include: false
tt_reg |>
  save_tt(file.path(dir_post, "img", "table_reg.pdf"),
          overwrite = TRUE)
```

```{bash}
#| include: false
#!/bin/bash
pdf2svg img/table_reg.pdf img/table_reg.svg
rm img/*.log
```

![Logit Regression of Hospitalization and Death within 24 Hours](img/table_reg.svg){fig-align="center"}

## Last Comments

In this post, I introduced the `tinytable` package, which is a gamechanger of creating tables in R.
In the wrangling process, I firmly believe that `tinytable` is more flexible and powerful than `kableExtra` and `gt` for the following reasons:

- Covers almost all the features of `kableExtra` and `gt` & `gtExtras`. You can use `multirow` & `multicolumn`, highlight cells, format cells, and mathematical expressions
- Allows to export tables not only in HTML and LaTeX but also in PDF (with `tinytex`) and Typst
- Compiles faster than `kableExtra` and `gt`. I think this is because `tinytable` is a small package that only uses baseR

Have a happy R life ðŸ¥‚!